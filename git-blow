#!/bin/sh

export GITBLOW_DIR=$(dirname "$0")

export GITFLOW_PATH=$(which git-flow)
export GITFLOW_DIR=$(dirname $GITFLOW_PATH)

usage() {
    echo "usage: git blow <subcommand>"
    echo
    echo "Available subcommands are:"
    echo "   sync      "
    echo "   release   "
    echo "   tag       "
    echo "   version   Shows version information."
    echo
    echo "Try 'git blow <subcommand> help' for details."
}

main() {
    if [ $# -lt 1 ]; then
        usage
        exit 1
    fi

    # load common functionality
    . "$GITFLOW_DIR/gitflow-common"

    # This environmental variable fixes non-POSIX getopt style argument
    # parsing, effectively breaking git-flow subcommand parsing on several
    # Linux platforms.
    export POSIXLY_CORRECT=1

    # use the shFlags project to parse the command line arguments
    . "$GITFLOW_DIR/gitflow-shFlags"
    FLAGS_PARENT="git blow"
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    # sanity checks
    SUBCOMMAND="$1"; shift

    if [ ! -e "$GITBLOW_DIR/git-blow-$SUBCOMMAND" ]; then
        usage
        exit 1
    fi

    # run command
    . "$GITBLOW_DIR/git-blow-$SUBCOMMAND"
    FLAGS_PARENT="git blow $SUBCOMMAND"

    # test if the first argument is a flag (i.e. starts with '-')
    # in that case, we interpret this arg as a flag for the default
    # command
    SUBACTION="default"
    if [ "$1" != "" ] && { ! echo "$1" | grep -q "^-"; } then
        SUBACTION="$1"; shift
    fi
    if ! type "cmd_$SUBACTION" >/dev/null 2>&1; then
        warn "Unknown subcommand: '$SUBACTION'"
        usage
        exit 1
    fi

    # run the specified action
    cmd_$SUBACTION "$@"
}

main "$@"
